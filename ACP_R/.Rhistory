table_descr_GA=table_descr_GA[,-1]
dim(table_descr_GA)
rf_search$optVariables
Descr_GA=rf_search$optVariables
table_after_GA=tableP[,Descr_GA]
dim(table_after_GA)
##################################
######  ACP 2 Genetic ALgo  ######
##################################
pca_result_GA = (prcomp(table_after_GA)) #Calcul d'ACP 2 sur Best Descr GA
##################################
######  ACP 2 Genetic ALgo  ######
##################################
pca_result_GA = (prcomp(table_after_GA)) #Calcul d'ACP 2 sur Best Descr GA
fviz_pca_ind(pca_result_GA,
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = T
)
tableP2_class[,1]
#################################################
#################################################
#################################################
########     RANDOM FOREST IMPORTANCE   #########
#################################################
#################################################
#tablePvrai_class=cbind(tableP, as.factor(V_class))
ntree.val = 600
mtry.val = sqrt(length(tableP))  # Pour ajuster ntree on prend au debut racine carr?ee du nombre de var
set.seed(2019)
fit.RF = randomForest(tableP2_class[,1] ~ . , data = tableP, ntree = ntree.val, mtry = mtry.val)
plot(fit.RF$err.rate[, 1], type = "l", xlab = "nombre d'arbres", ylab = "erreur OOB")
plot(fit.RF$err.rate[, 1], type = "l", xlab = "Nombre d'arbres", ylab = "Erreur OOB", main="Erreur Out Of Bag (OOB) en fonction du \n Nombre d'arbres")
plot(fit.RF$err.rate[, 1], type = "l", xlab = "Nombre d'arbres", ylab = "Erreur OOB", main="Erreur Out Of Bag (OOB) en fonction du \n nombre d'arbres")
fit.des = as.matrix(sort(fit.RF$importance[,"MeanDecreaseGini"],decreasing = T))
plot(fit.des, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,600,12), ylim= c(0,0.3), type="l", main = "Importance des Descripteurs")
plot(fit.des, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,100,10), xlim =c(0,100), ylim= c(0,0.3), type="l", main = "Importance des Descripteurs")
varImpPlot(fit.RF)
plot(fit.des, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,600,12), ylim= c(0,0.3), type="l", main = "Importance des Descripteurs")
barplot(fit.des[1 :150,], las = 2)
top10desRF = rownames(fit.des)[1:10]
table_top10RF = tableP[,top10desRF]
pca_result_top10RF = (prcomp(table_top10RF))#Calcul d'ACP 2 sur Best Descr RF
#### PLOT ####
fviz_pca_ind(pca_result_top10RF,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
#### ACP FINAL  ####
final_des = rownames(fit.des)[1:100]
finaltable = tableP[,final_des]
final_pca = (prcomp(finaltable))#Calcul d'ACP 2 sur Best Descr RF
fviz_pca_ind(final_pca,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
V_class
##### Random Forest After Genetic Algo #####
ntree.val_2 = 600
mtry.val_2 = sqrt(length(table_after_GA))  # Pour ajuster ntree on prend au debut racine carr?ee du nombre de var
set.seed(2019)
fit.RFafterGA = randomForest(V_class ~ . , data = table_after_GA, ntree = ntree.val_2, mtry = mtry.val_2)
##### Random Forest After Genetic Algo #####
table_after_GA_class= cbind(V_class, table_after_GA)
str(table_after_GA_class[,1])
##### Random Forest After Genetic Algo #####
table_after_GA_class= cbind(V_class, table_after_GA)
ntree.val_2 = 600
mtry.val_2 = sqrt(length(table_after_GA))  # Pour ajuster ntree on prend au debut racine carr?ee du nombre de var
set.seed(2019)
fit.RFafterGA = randomForest(table_after_GA_class[,1] ~ . , data = table_after_GA, ntree = ntree.val_2, mtry = mtry.val_2)
plot(fit.RFafterGA$err.rate[, 1], type = "l", xlab = "Nombre d'arbres", ylab = "Erreur OOB", main="Erreur Out Of Bag (OOB) en fonction du \n nombre d'arbres")
fit.des_afterGA = as.matrix(sort(fit.RFafterGA$importance[,"MeanDecreaseGini"],decreasing = T))
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,600,12), ylim= c(0,0.3), type="l", main = "Importance des Descripteurs")
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", type="l", main = "Importance des Descripteurs")
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,300,6), ylim= c(0,0.5), type="l", main = "Importance des Descripteurs")
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,100,10), xlim =c(0,100), ylim= c(0,0.3), type="l", main = "Importance des Descripteurs")
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,100,10), xlim =c(0,100), ylim= c(0,0.5), type="b", main = "Importance des Descripteurs")
top10desRF_GA = rownames(fit.des_afterGA)[1:10]
table_top10RF_GA = table_after_GA[,top10desRF_GA]
pca_result_top10RF_GA = (prcomp(table_top10RF_GA))#Calcul d'ACP 2 sur Best Descr RF
fviz_pca_ind(pca_result_top10RF_GA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
View(table_descr_GA)
fit.des_afterGA
######$ VAriance cumulées
Var_table=data.frame(a=1:length(fit.des_afterGA),b=1:length(fit.des_afterGA))
for(i in 1:length(fit.des_afterGA)) {
topdesRFloop = rownames(fit.des_afterGA)[1:i]
table_topRFloop = table_after_GA[,topdesRFloop]
pca_result_topRFloop = (prcomp(table_topRFloop))
varcumulloop = as.numeric(get_eigenvalue(pca_result_topRFloop)[2,3])
Var_table[i,] = c(i, as.numeric(varcumulloop))
}
Var_table=transform(Var_table, a=as.numeric(a), b= (as.numeric(b)))
plot(Var_table$a,Var_table$b, ylab="Variance cumulée PC1 + PC2 (%)", xlab = "TOP n° ", main = "Variance cumulée en fonction des descripteurs choisis après Random Forest", type="b", lab= c(40,10,0) )
plot(Var_table$a,Var_table$b, ylab="Variance cumulée PC1 + PC2 (%)", xlab = "TOP n° ", main = "Variance cumulée en fonction des descripteurs choisis après Random Forest", type="l", lab= c(40,10,0) )
fit.des
plot(Var_table$a,Var_table$b, ylab="Variance cumulée PC1 + PC2 (%)", xlab = "TOP n° ", main = "Variance cumulée en fonction des descripteurs choisis \n après Genetic Algorithm puisRandom Forest", type="l", lab= c(40,10,0) )
plot(Var_table$a,Var_table$b, ylab="Variance cumulée PC1 + PC2 (%)", xlab = "TOP n° ", main = "Variance cumulée en fonction des descripteurs choisis \n après Genetic Algorithm puis Random Forest", type="l", lab= c(40,10,0) )
fit.des_afterGA
save.image("C:/Users/yassine/Desktop/Stage Rayane/FINAL/.RData")
version
fviz_pca_ind(pca_result_GA,
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = T
)
rgl
library(rgl)
install.packages('rgl')
library(rgl)
plot3d(table_after_GA, col=V_class)
plot3d(pca_result_GA, col=c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"))
plot3d(pca_result_GA[,], col=c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D")):
)
plot3d(pca_result_GA[,1:], col=c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"))
plot3d(pca_result_GA[,1:3], col=c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"))
plot3d(pca_result_GA[,1:3])
plot3d(pca_result_GA[, 1:3])
######## TEST 3D #######
pc <- princomp(table_after_GA, cor=TRUE, scores=TRUE)
######## TEST 3D #######
pc <- princomp(table_after_GA[,fit.des[1:10]], cor=TRUE, scores=TRUE)
######## TEST 3D #######
pc <- princomp(table_after_GA[,fit.des[1:10]], cor=TRUE, scores=TRUE)
barplot(fit.des_afterGA[1 :150,], las = 2)
varImpPlot(fit.RFafterGA)
#### PLOT ####
fviz_pca_ind(pca_result_top10RF,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Log P #####
ALOGP=(table_valuesSD0[,"ALOGP"])
h=hist(ALOGP, ylab = "Nombre de molécules", xlab = "Log P", main = "Histogramme représentant la distribution du Log P", breaks = c(0:15))
xfit<-seq(min(ALOGP),max(ALOGP),length=30)
yfit<-dnorm(xfit,mean=mean(ALOGP),sd=ALOGP)
yfit <- yfit*diff(h$mids[1:2])*length(ALOGP)
lines(xfit, yfit, col="blue", lw=2)
lines(density(h))
curve(dnorm(h, mean=mean(ALOGP), sd=sd(ALOGP)), add=TRUE)
##### Log P #####
ALOGP=(table_valuesSD0[,"ALOGP"])
h=hist(ALOGP, ylab = "Nombre de molécules", xlab = "Log P", main = "Histogramme représentant la distribution du Log P", breaks = c(0:15))
## Plot mais cette fois de manière décroissante
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,300,6), ylim= c(0,0.5), type="l", main = "Importance des Descripteurs")
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,100,10), xlim =c(0,100), ylim= c(0,0.5), type="b", main = "Importance des Descripteurs")
## Plot mais cette fois de manière décroissante
plot(fit.des_afterGA, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,300,6), ylim= c(0,0.5), type="l", main = "Importance des Descripteurs")
plot(fit.des, xlab="Rang du descripteur", ylab="MeanDecreaseGini", xaxp=c(0,600,12), ylim= c(0,0.3), type="l", main = "Importance des Descripteurs")
###############   Cercle de corrélation    ###############
fviz_pca_var(pca_result, col.var = "black")
#### Représentation Graphique de l'ACP 1 ####
fviz_pca_ind(pca_result,
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"), #couleur des groupes
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = T
)
#### Représentation Graphique de l'ACP 1 ####
fviz_pca_ind(pca_result,
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"), #couleur des groupes
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
smallVars = round(smallVars/length(rf_search$control$index)*100,1)
varText = paste0(names(smallVars), " (", smallVars, "%)")
varText = paste(varText, collapse = ", ")
rf_search
fit.des[1:5]
rownames(fit.des[1:5])
fit.des
Descr_GA
##### Affichage et Selection des meilleurs descripteurs #####
rf_search$optVariables
##### Affichage et Selection des meilleurs descripteurs #####
rf_search$optVariables
# run the RFE algorithm
RFE_results <- rfe( tableP,  V_class, sizes=c(1:557), rfeControl=RFE_ctrl)
# define the control using a random forest selection function
RFE_ctrl <- rfeControl(functions=rfFuncs, method="cv", number=2)
# run the RFE algorithm
RFE_results <- rfe( tableP,  V_class, sizes=c(1:557), rfeControl=RFE_ctrl)
# run the RFE algorithm
RFE_results <- rfe( tableP,  V_class, rfeControl=RFE_ctrl)
smallVars = round(smallVars/length(rf_search$control$index)*100,
1)
varText = paste0(names(smallVars), " (", smallVars, "%)")
varText = paste(varText, collapse = ", ")
rf_search$control$index
rf_search$fit$importance
length(rf_search$fit$importance)
as.matrix(sort(rf_search$fit$importance[,"MeanDecreaseGini"],decreasing = T))
as.matrix(sort(rf_search$fit$importance[,"MeanDecreaseGini"],decreasing = T))[1:5]
as.matrix(sort(fit.RF$importance[,"MeanDecreaseGini"],decreasing = T))[1:5]
as.matrix(sort(fit.RF$importance[,"MeanDecreaseGini"],decreasing = T))
as.matrix(sort(fit.RFafterGA$importance[,"MeanDecreaseGini"],decreasing = T))
rf_search
print.gafs
print.gafs()
get_all_vars()
sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
sort(unlist(rf_search$resampled_vars), decreasing = TRUE)
sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:15]
smallVars <- round(smallVars/length(x$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
varText
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
varText
selectedGA_Vars= names(smallVars)
selectedGA_Vars
selectedGA_Vars[0]
selectedGA_Vars[1]
selectedGA_Vars[2]
selectedGA_Vars[3]
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
library(factoextra)
library(FactoMineR)
fviz_pca_ind(pca_result_top10RF_GA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:10]
smallVars <- round(smallVars/length(x$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:10]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(smallVars)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:15]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(smallVars)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:15]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(smallVars)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
selectedGA_Vars= names(varss)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:20]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(varss)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:5]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(varss)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:5]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste(varText, collapse = ", ")
varText <- paste0(names(smallVars), " (", smallVars, "%)")
table_selectedGA_Vars = tableP[,selectedGA_Vars]
selectedGA_Vars= names(smallVars)
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:5]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(smallVars)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:2]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(smallVars)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:10]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(smallVars)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
rf_search$fit$importance
as.matrix(sort(rf_search$fit$importance), decreasing =T))
as.matrix(sort(rf_search$fit$importance), decreasing =T)
as.matrix(sort(rf_search$fit$importance), decreasing =TRUE)
as.matrix(sort(rf_search$fit$importance[,"MeanDecreaseGini"],decreasing = T)
)
as.matrix(sort(rf_search$fit$importance[,"MeanDecreaseGini"],decreasing = T))[1:10]
##### Classement desc selon top GA ( fit$importance mean decreasing GIni) #####
top_10_GA_fit = as.matrix(sort(rf_search$fit$importance[,"MeanDecreaseGini"],decreasing = T))[1:10]
table_top_10_GA_fit = tableP[,top_10_GA_fit]
table_top_10_GA_fit
table_top_10_GA_fit = tableP[,names(top_10_GA_fit)]
table_top_10_GA_fit
##### Classement desc selon top GA ( fit$importance mean decreasing GIni) #####
top_10_GA_fit = rownames(as.matrix(sort(rf_search$fit$importance[,"MeanDecreaseGini"],decreasing = T)))[1:10]
table_top_10_GA_fit = tableP[,top_10_GA_fit]
table_top_10_GA_fit
pca_result_top_10_GA_fit = (prcomp(table_top_10_GA_fit))#Calcul d'ACP 2 sur Best Descr GA via fit importance
fviz_pca_ind(pca_result_top_10_GA_fit,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
selectedGA_Vars
##### Classement descripteurs selon top GA ####
varss = sort(table(unlist(rf_search$resampled_vars)), decreasing = TRUE)
smallVars = varss[1:10]
smallVars <- round(smallVars/length(rf_search$control$index)*100, 1)
varText <- paste0(names(smallVars), " (", smallVars, "%)")
varText <- paste(varText, collapse = ", ")
selectedGA_Vars= names(smallVars)
table_selectedGA_Vars = tableP[,selectedGA_Vars]
pca_result_selectedGA = (prcomp(table_selectedGA_Vars))#Calcul d'ACP 2 sur Best Descr RF(top10)
fviz_pca_ind(pca_result_selectedGA,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
##### Classement desc selon top GA ( fit$importance mean decrease Gini) #####
top_10_GA_fit = rownames(as.matrix(sort(rf_search$fit$importance[,"MeanDecreaseGini"],decreasing = T)))[1:10]
table_top_10_GA_fit = tableP[,top_10_GA_fit]
pca_result_top_10_GA_fit = (prcomp(table_top_10_GA_fit))#Calcul d'ACP 2 sur Best Descr GA via fit importance
fviz_pca_ind(pca_result_top_10_GA_fit,
axes = c(1,2),
geom.ind = c("point"), # Montre les points seulement (mais pas le "text")
col.ind = V_class, # colorer by groups
palette = c("#D3D600", "#00AFBB",  "#49FF00", "#FC4E07", "#FF00CD", "#26A97D"),
addEllipses = TRUE, # Ellipses de concentration
legend.title = "Groups",
repel = F
)
View(table_top10RF)
table_top10RF
write.csv(x = table_top10RF,file = top10RF_Descr)
write.csv(x = table_top10RF, file = 'top10RF_Descr')
dragon_table[0:5]
